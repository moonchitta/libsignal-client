name: Upload Release Artifacts

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag'
        required: true

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.tag }}

    - name: Install nightly rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal

    - name: Get Node version from .nvmrc
      id: get-nvm-version
      shell: bash
      run: echo "::set-output name=node-version::$(cat .nvmrc)"

    - uses: actions/setup-node@v2
      with:
        node-version: ${{ steps.get-nvm-version.outputs.node-version }}

    - name: Verify that the Node bindings are up to date
      run: rust/bridge/node/bin/gen_ts_decl.py --verify
      if: matrix.os == 'ubuntu-latest'

    # This is overkill to build the native library, but it does ensure consistency.
    - run: yarn install

    - name: Upload library
      uses: actions/upload-artifact@v2
      with:
        name: libsignal_client (${{matrix.os}})
        path: build/Release/libsignal_client_*.node

  package:
    name: Package

    runs-on: ubuntu-latest

    needs: build

    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.tag }}

    - name: Get Node version from .nvmrc
      id: get-nvm-version
      shell: bash
      run: echo "::set-output name=node-version::$(cat .nvmrc)"

    - uses: actions/setup-node@v2
      with:
        node-version: ${{ steps.get-nvm-version.outputs.node-version }}

    - name: Download built libraries
      id: download
      uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: Copy libraries
      run: mkdir -p build/Release && cp ${{ steps.download.outputs.download-path }}/*/*.node build/Release

    - name: Remove binding.gyp to skip build
      run: "mv binding.gyp{,.disabled}"

    - run: yarn install

    - run: yarn tsc

    - run: yarn lint

    - run: yarn format -c

    - name: Run yarn test
      uses: GabrielBB/xvfb-action@v1.4
      with:
        # The tests use an Electron-based runner, so we need to set up a dummy display for them.
        run: yarn test

    - run: yarn pack -f signal-client-node.tgz

    - name: Upload package
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: signal-client-node.tgz
        tag: ${{ github.event.inputs.tag }}
        overwrite: true
        body: |
          Pre-built artifacts for Java are available at https://search.maven.org/artifact/org.whispersystems/signal-client-android.
          Pre-built artifacts for Swift are not provided; the implementation library will be built when the CocoaPod is added or updated.
